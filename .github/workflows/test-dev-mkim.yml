name: Test-dev-mkim

on:
  push:
    branches: [ dev-mkim, fix-build-env ]
  pull_request:
    branches: [ master ]

jobs:
  image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
    
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
       
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true

      - name: Setup Golang caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-

      - name: Build and Push image to registry
        run: |
          export VERSION=test
          export GITHUB_REPOSITORY=${{ github.repository }}
          export REGISTRY_TARGET=ghcr.io
          export REGISTRY_USERNAME=${{ github.actor }}
          export SET_NO_GO_PROXY=true
          export SET_NO_UBUNTU_MIRROR=true
          export SET_NO_DOCKER_TIMEZONE=true
          export SET_CACHE_FROM="type=gha"
          export SET_CACHE_TO="type=gha,mode=max"
          docker buildx create --use
          make container
  linux:
    runs-on: ubuntu-latest
    needs: [ "image" ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true

      - name: Setup Minikube
        id: minikube
        timeout-minutes: 30
        uses: medyagh/setup-minikube@master
        with:
          cache: true

      - name: Kubernetes info
        run: |
          kubectl cluster-info
          cat ~/.kube/config
          kubectl get pods -n kube-system -o wide
      - name: Install demo bookinfo
        run: |
          minikube image load --remote istio/examples-bookinfo-details-v1:1.16.2
          minikube image load --remote istio/examples-bookinfo-ratings-v1:1.16.2
          minikube image load --remote istio/examples-bookinfo-reviews-v1:1.16.2
          minikube image load --remote istio/examples-bookinfo-productpage-v1:1.16.2
          minikube image load --remote naison/authors:latest
          minikube image load --remote nginx:latest
          minikube image load --remote naison/kubevpn:test
          minikube image ls
          eval $(minikube docker-env)
          kubectl apply -f ./samples/bookinfo.yaml

      - name: Build
        run: |
          export VERSION=test
          export REGISTRY_TARGET=ghcr.io
          export REGISTRY_USERNAME=${{ github.actor }}
          export SET_NO_GO_PROXY=true
          export SET_NO_UBUNTU_MIRROR=true
          export SET_NO_DOCKER_TIMEZONE=true
          export SET_CACHE_FROM="type=gha"
          export SET_CACHE_TO="type=gha,mode=max"
          make kubevpn-linux-amd64
          chmod +x ./bin/kubevpn
          cp ./bin/kubevpn /usr/local/bin/kubevpn
          kubevpn version

      - name: Wait for pods reviews to be ready
        run: |
          kubectl wait pods -l app=reviews --for=condition=Ready --timeout=3600s
          kubectl wait pods -l app=productpage --for=condition=Ready --timeout=3600s
          kubectl get svc -A -o wide
          kubectl get pod -A -o wide
          kubectl get all -o wide
          kubectl get nodes -o yaml
          ifconfig
          route -n
          sudo ln /usr/bin/resolvectl /usr/bin/systemd-resolve

      - name: Setup Test
        run: |
          ls -l ~/.ssh || echo "test failed but continue"
          # ConfigAlias: "ry-dev-agd", ConfigHost: "ry-dev-agd"

      - name: Test
        run: go test -v -failfast ./... -timeout=10m  && echo "Test Success" || (echo "Test Failed" && exit 1)

  macos:
    runs-on: macos-latest
    needs: [ "image" ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true

      - name: Set up Docker
        uses: crazy-max/ghaction-setup-docker@v1.4.0

      - name: Install minikube
        run: |
          set -x
          docker version
          brew install minikube
          minikube start --driver=docker
          kubectl get pod -A -o wide
          minikube kubectl -- get pod -A -o wide

      - name: Kubernetes info
        run: |
          kubectl cluster-info
          cat ~/.kube/config
          kubectl get pods -n kube-system -o wide

      - name: Install demo bookinfo
        run: |
          minikube image load --remote istio/examples-bookinfo-details-v1:1.16.2
          minikube image load --remote istio/examples-bookinfo-ratings-v1:1.16.2
          minikube image load --remote istio/examples-bookinfo-reviews-v1:1.16.2
          minikube image load --remote istio/examples-bookinfo-productpage-v1:1.16.2
          minikube image load --remote naison/authors:latest
          minikube image load --remote nginx:latest
          minikube image load --remote naison/kubevpn:test
          minikube image ls
          eval $(minikube docker-env)
          kubectl apply -f ./samples/bookinfo.yaml

      - name: Build
        run: |
          export VERSION=test
          export GITHUB_REPOSITORY=${{ github.repository }}
          export REGISTRY_TARGET=ghcr.io
          export REGISTRY_USERNAME=${{ github.actor }}
          export SET_NO_GO_PROXY=true
          export SET_NO_UBUNTU_MIRROR=true
          export SET_NO_DOCKER_TIMEZONE=true
          export SET_CACHE_FROM="type=gha"
          export SET_CACHE_TO="type=gha,mode=max"
          make kubevpn-darwin-amd64
          chmod +x ./bin/kubevpn
          cp ./bin/kubevpn /usr/local/bin/kubevpn
          kubevpn version

      - name: Wait for pods reviews to be ready
        run: |
          kubectl wait pods -l app=reviews --for=condition=Ready --timeout=3600s
          kubectl wait pods -l app=productpage --for=condition=Ready --timeout=3600s
          kubectl get svc -A -o wide || true
          kubectl get pod -A -o wide || true
          kubectl get all -o wide || true
          kubectl get nodes -o yaml || true
          ifconfig
          netstat -anr

      - name: Test
        run: |
          go test -v -failfast ./... -timeout=10m && echo "Test Success" || (echo "Test Failed" && exit 1)

  windows:
    runs-on: windows-latest
    needs: [ "image" ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Set up Docker
        uses: crazy-max/ghaction-setup-docker@v2
      - run: |
         C:
         dir C:\hostedtoolcache\windows\docker-stable\24.0.7\x64
         C:\hostedtoolcache\windows\docker-stable\24.0.7\x64\docker-proxy.exe --help
         C:\hostedtoolcache\windows\docker-stable\24.0.7\x64\dockerd.exe --help
         C:\hostedtoolcache\windows\docker-stable\24.0.7\x64\docker.exe --help
         docker info --format '{{.OSType}}'
      - run: |
         choco install minikube
         minikube start --driver=docker
         choco install make

      - name: Build
        run: |
          make kubevpn-windows-amd64